<?php
/**
 * @file
 * Code for the VIU Simple FAQ feature.
 */

include_once 'viu_simple_faq.features.inc';

/**
 * Implements hook_views_api_alter()
 *
 * Views api is specified by features but we want to add the template directory.
 */
function viu_simple_faq_views_api_alter(&$apis) {
  if (!empty($apis['viu_simple_faq']) && '3.0' == $apis['viu_simple_faq']['api']) {
    $apis['viu_simple_faq']['template path'] = drupal_get_path('module', 'viu_simple_faq') . '/templates/views';
  }
}

/**
 * Implements hook_preprocess_HOOK
 *
 * We want to override the panels_bootstrap_pane hook and inject some HTML (for the fa-icon)
 */
function viu_simple_faq_preprocess_viu_panels_pane(&$vars) {
  //Target the Categories pane:
  if ('FAQ Categories' == $vars['title']) {
    $vars['title'] = '<span aria-hidden="true" class="icon-question"></span>&nbsp;' . $vars['title'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function viu_simple_faq_form_oa_section_node_form_alter(&$form, &$form_state, $form_id) {
  //Find the section type through the term id:
  $tid = $form['#node']->field_oa_section[LANGUAGE_NONE][0]['tid'];
  $term = taxonomy_term_load($tid);
  if ('Frequently Asked Questions' == $term->name && $form['#node_edit_form']) {
    if (NULL == $form['body'][LANGUAGE_NONE][0]['#default_value']) {
      $form['body'][LANGUAGE_NONE][0]['#default_value'] = t('Please feel free to contact us about other specific questions that you might have.');
    }
    if (NULL == $form['body'][LANGUAGE_NONE][0]['#description']) {
      $form['body'][LANGUAGE_NONE][0]['#description'] = t('You should update the section below with a link to your staff directory, contact page or contact form.');
    }
  }
}

/**
 * Implements hook_permission().
 */
function viu_simple_faq_permission() {
  return array(
    'access viu_simple_faq administration' => array(
      'title' => t('Manage Simple FAQ'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Provide administration links on the section page
 *
 */
function viu_simple_faq_menu() {
  $items['node/%node/manage_faq'] = array(
    'title' => t('Manage FAQ Items'),
    'page callback' => '_viu_simple_faq_manage_content',
    'page arguments' => array(1),
    'access callback' => '_viu_simple_faq_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );

  $items['node/%node/faq_categories'] = array(
    'title' => t('Manage FAQ Categories'),
    'page callback' => '_viu_simple_faq_manage_categories',
    'page arguments' => array(1),
    'access callback' => '_viu_simple_faq_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Access callback for managing FAQ node and term menu tabs
 *
 * @return bool
 *  TRUE if access is allowed
 */
function _viu_simple_faq_access_callback($node) {
  return (   'oa_section' == $node->type && user_access('access viu_simple_faq administration')
          && property_exists($node, 'panelizer')
          && array_key_exists('page_manager', $node->panelizer)
          && property_exists($node->panelizer['page_manager'], 'name')
          && 'node:oa_section:simple_faq_section' == $node->panelizer['page_manager']->name);
}

/**
 * Page routing mechanism for Manage FAQ content menu tab
 *
 * @param $node
 *  The current node object (i.e. section page)
 */
function _viu_simple_faq_manage_content($node) {
  //Load the administrative view for that content
  drupal_goto(url('node/' . $node->nid . '/content'));
}

/**
 * Page routing mechanism for Manage Categories FAQ menu tab
 *
 * @param $node
 *  The current node object (i.e. section page)
 * @param $section
 *  The section machine name
 */
function _viu_simple_faq_manage_categories($node) {
  $tid = taxonomy_vocabulary_machine_name_load($node->field_url_name[LANGUAGE_NONE][0]['machine']);
  //load the admin view for that vocab
  drupal_goto(url('node/' . $node->nid . '/terms/' . $tid));
}

/**
 * Implements hook_entity_insert().
 *
 * Programmatically create FAQ Categories Taxonomy Vocabulary
 *
 * NOTE:  If you ever re-use this code, consider parameterizing it into a core helper function
 */
function viu_simple_faq_entity_insert($entity, $type) {
  if ('node' == $type && 'oa_section' == $entity->type) {
    if ('node:oa_section:simple_faq_section' == $entity->panelizer['page_manager']->name) {
      //Gather information we need for the name of the new taxonomy vocabulary:
      if ($og_context = og_context()) {
        $group = node_load($og_context['gid']);
      } else {
        drupal_set_message("No og_context detected for taxonomy creation, aborting.", 'error', FALSE);
        watchdog('viu_simple_faq', 'FAQ section - No og_context() detected for FAQ categories vocabulary', array(), WATCHDOG_WARNING);
        return;
      }

      //Get the machine name of the section being created
      $machine_name = $entity->field_url_name[LANGUAGE_NONE][0]['machine'];

      //Generate new vocabulary
      $vocabulary = (object) array(
        'name' => t($group->title . " " . $entity->title),
        'machine_name' => $machine_name,
        'description' => t('These are the default FAQ Categories for the ' . $group->title . ' section.'),
        'hierarchy' => '0',
        'weight' => 0,
      );

      //TODO error checking here (based on return value, throw a drupal_set_msg or error)
      // Perhaps check the name of the created taxonomy, and then set some flag if it's a non-standard machine name
      switch (taxonomy_vocabulary_save($vocabulary)) {
        case SAVED_NEW:
          drupal_set_message(t('Created new vocabulary %name.', array('%name' => $vocabulary->name)));
          watchdog('viu_simple_faq', 'Created new vocabulary %name.', array('%name' => $vocabulary->name), WATCHDOG_NOTICE, l(t('edit'), 'admin/structure/taxonomy/' . $vocabulary->machine_name . '/edit'));
          break;

        default: //TODO May be entirely superfluous, or use for error case
          drupal_set_message(t('Updated vocabulary %name.', array('%name' => $vocabulary->name)));
          watchdog('viu_simple_faq', 'Updated vocabulary %name.', array('%name' => $vocabulary->name), WATCHDOG_NOTICE, l(t('edit'), 'admin/structure/taxonomy/' . $vocabulary->machine_name . '/edit'));
          break;
      }

      //Relate group to vocab
      $og_vocab_relation = array (
        'group_type' => $og_context['group_type'],
        'gid' => $og_context['gid'],
      );
      $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
      $vid = $vocabulary->vid;
      og_vocab_relation_save($vid, $og_vocab_relation['group_type'], $og_vocab_relation['gid']);

      //Simple FAQ content type-specific settings.
      $og_vocab_settings = array(
        'required' => 1,
        'widget_type' => 'options_buttons',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      );

      //Generate OG Vocab Entity
      $field_name = key(og_vocab_get_og_vocab_fields('node', 'viu_simple_faq_question'));
      $og_vocab = og_vocab_create_og_vocab($vid, $og_vocab_relation['group_type'], 'viu_simple_faq_question', $field_name, $og_vocab_settings);

      //Run the og_vocab save method (duplication of default behaviour)
      $og_vocab->save();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Warn the user to remove content prior to or after section deletion
 * Anything you want to do on section deletion can be added here.
 */
function viu_simple_faq_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
  if (array_key_exists('#node', $form) && 'oa_section' == $form['#node']->type) {
    if ('node:oa_section:simple_faq_section' == $form['#node']->panelizer['page_manager']->name) {
      $form['description']['#markup'] = t('Are you sure you want to do this?  FAQ Categories will be destroyed and any remaining FAQ items will be orphaned!');
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function viu_simple_faq_entity_delete($entity, $type) {
  //Determine if we are deleting a FAQ Section:
  if ('node' == $type && 'oa_section' == $entity->type) {
    if ('node:oa_section:simple_faq_section' == $entity->panelizer['page_manager']->name) {
      $machine_name = $entity->field_url_name[LANGUAGE_NONE][0]['machine'];
      $taxonomy = taxonomy_vocabulary_machine_name_load($machine_name);
      taxonomy_vocabulary_delete($taxonomy->vid);
    }
  }
}
