<?php
/**
 * @file
 * Code for the VIU Simple FAQ feature.
 */

include_once 'viu_simple_faq.features.inc';

/**
 * Implements hook_views_api_alter()
 *
 * Views api is specified by features but we want to add the template directory.
 */
function viu_simple_faq_views_api_alter(&$apis) {
  if (!empty($apis['viu_simple_faq']) && '3.0' == $apis['viu_simple_faq']['api']) {
    $apis['viu_simple_faq']['template path'] = drupal_get_path('module', 'viu_simple_faq') . '/templates/views';
  }
}

/**
 * Implements hook_preprocess_HOOK
 *
 * We want to override the panels_bootstrap_pane hook and inject some HTML (for the fa-icon)
 */
function viu_simple_faq_preprocess_panels_bootstrap_pane(&$vars) {
  //Target the Categories pane:
  if ('FAQ Categories' == $vars['title']) {
    $vars['title'] = '<span aria-hidden="true" class="icon-question"></span>&nbsp;' . $vars['title'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function viu_simple_faq_form_oa_section_node_form_alter(&$form, &$form_state, $form_id) {
  // TODO add conditional to check whether we are looking at a section page form (check taxonomy id)

  //TODO See if we can do these through the UI instead of here (configuration instead of customization)
  if ($form['#node_edit_form']) {
    if (NULL == $form['title']['#default_value']) {
      $form['title']['#default_value'] = t('Frequently Asked Questions');
      $form['title']['#description'] = t('The title of this section on your website.');
    };
    if (NULL == $form['body'][LANGUAGE_NONE][0]['#default_value']) {
      $form['body'][LANGUAGE_NONE][0]['#default_value'] = t('Please feel free to contact us about other specific questions that you might have.');
    }
    if (NULL == $form['body'][LANGUAGE_NONE][0]['#description']) {
      $form['body'][LANGUAGE_NONE][0]['#description'] = t('You should update the section below with a link to your staff directory, contact page or contact form.');
    }
  }
}

/**
 * Implements hook_permission().
 */
function viu_simple_faq_permission() {
  return array(
    'access viu_simple_faq administration' => array(
      'title' => t('Manage Simple FAQ'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Provide administration links on the section page
 */
function viu_simple_faq_menu() {
  $items['node/%node/manage_faq'] = array(
    'title' => t('Manage FAQ Items'),
    'page callback' => '_viu_simple_faq_manage_content',
    'page arguments' => array(1),
    'access callback' => '_viu_simple_faq_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );

  $items['node/%node/faq_categories'] = array(
    'title' => t('Manage FAQ Categories'),
    'page callback' => '_viu_simple_faq_manage_categories',
    'page arguments' => array(1),
    'access callback' => '_viu_simple_faq_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 *
 * @todo What is this for?  Development only?
 */
function viu_simple_faq_entity_info_alter(&$entity_info) {
//  $entity_info['taxonomy_vocabulary']['fieldable'] = TRUE;
//  sdpm($entity_info);
}

/**
 * Access callback for managing FAQ nodes
 *
 * @return bool
 *  TRUE if access is allowed
 */
function _viu_simple_faq_access_callback($node) {
  //TODO Limit to only FAQ sections (permissions?)
  return 'oa_section' == $node->type && user_access('access viu_simple_faq administration');
}

/**
 * Page routing mechanism for Manage FAQ content menu tab
 *
 * @param $node
 *  The current node object (i.e. section page)
 */
function _viu_simple_faq_manage_content($node) {
  //Load the administrative view for that content
  drupal_goto(url('node/' . $node->nid . '/content'));
}

/**
 * Page routing mechanism for Manage Categories FAQ menu tab
 *
 * @param $node
 *  The current node object (i.e. section page)
 * @param $section
 *  The section machine name
 */
function _viu_simple_faq_manage_categories($node) {
  //Get the primary site from the node
  $group = node_load($node->og_group_ref[LANGUAGE_NONE][0]['target_id']);

  //todo see if there are multiple vocabs associated with this section
  //todo test/add subsite support

  //Get the (default) machine name for the vocab from the group
  $machine_name = str_replace(array('-', ' ',), '_', strtolower($group->title)) . "_default_faq_categories";

  //load the admin view for that vocab(s?)
  drupal_goto(url('admin/structure/taxonomy/' . $machine_name));
}

/**
 * Implements hook_node_view().
 *
 * @todo FOR DEVELOPMENT ONLY (data structure inspection)
 *
 */
function viu_simple_faq_node_view($node, $view_mode, $langcode) {
  sdpm($node);
}

/**
 * Implements hook_entity_insert().
 *
 * Programmatically create FAQ Categories Taxonomy Vocabulary
 *
 * NOTE:  If you ever re-use this code, consider parameterizing it into a core helper function
 */
function viu_simple_faq_entity_insert($entity, $type) {
  sdpm($entity);
  //The following code block fires *after* FAQ section creation or deletion
  if (property_exists($entity, 'type') && ('oa_delete' == $entity->type || 'oa_create' == $entity->type)) {
    $target = node_load($entity->field_oa_message_space[LANGUAGE_NONE][0]['target_id']);
    sdpm($target);
    //Clear the menu cache (update menu items)
    //TODO WORKING HERE: CHECK THAT THIS ONLY FIRES WHEN IT'S SUPPOSED TO!!!  i.e. CHECK IF IT'S A SECTION
    //TODO WILL NOT FIRE ON OA DELETE: oa_delete message does not contain that particular property
    //cache_clear_all('menu');
  }


  //The following code block fires just prior to (?? I think ??) FAQ section creation
  //TODO Double check this conditional doesn't fire when it's not supposed to (e.g. on edit pages)
  if ('node' == $type && 'oa_section' == $entity->type) {
    if ('node:oa_section:simple_faq_section' == $entity->panelizer['page_manager']->name) {

      //Gather information we need for the name of the new taxonomy vocabulary:
      if ($og_context = og_context()) {
        $group = node_load($og_context['gid']);
        //TODO add support for subsites (talk to Darryl about use cases)
      } else {
        drupal_set_message("No og_context detected for taxonomy creation, aborting.", 'error', FALSE);
        watchdog('viu_simple_faq', 'FAQ section - No og_context() detected for FAQ categories vocabulary', array(), WATCHDOG_WARNING);
        return;
      }

      //Generate machine name for new vocabulary AND check to make sure it's not a duplicate
      $machine_name = str_replace(array('-', ' ',), '_', strtolower($group->title)) . "_default_faq_categories";

      // Set the og_vocab_query_taxonomy_vocabulary_load_multiple_alter static
      // variable to "skip" to prevent altering while we verify the machine name
      // doesn't exist yet. (Small performance hit here)
      $cache = &drupal_static('og_vocab_query_taxonomy_vocabulary_load_multiple_alter', FALSE);
      $cache = 'skip';

      //TODO Might need to do something about this if the user creates multiple taxonomies
      // i.e. How are we going to retrieve the vocab in the "manage categories" tab callback?
      if (taxonomy_vocabulary_machine_name_load($machine_name)) {
        // Start iterating over machine names until we hit one that doesn't
        // exist yet.
        //todo consider using the section name instead (they can't both be called 'frequently asked quesitons')
        $i = 1;
        while (taxonomy_vocabulary_machine_name_load($machine_name)) {
          //ANOTE: You changed 48, it used to be 32 - test it
          $machine_name = substr($machine_name, 0, 48 - strlen($i)) . $i;
          ++$i;
        }
      }

      //Generate new vocabulary
      $vocabulary = (object) array(
        'name' => t($group->title . " Default FAQ Categories"),
        'machine_name' => $machine_name,
        'description' => t('These are the default FAQ Categories for the ' . $group->title . ' section.'),
        'hierarchy' => '0',
        'weight' => 0,
      );

      //TODO error checking here (based on return value, throw a drupal_set_msg or error)
      // Perhaps check the name of the created taxonomy, and then set some flag if it's a non-standard machine name
      switch (taxonomy_vocabulary_save($vocabulary)) {
        case SAVED_NEW:
          drupal_set_message(t('Created new vocabulary %name.', array('%name' => $vocabulary->name)));
          watchdog('viu_simple_faq', 'Created new vocabulary %name.', array('%name' => $vocabulary->name), WATCHDOG_NOTICE, l(t('edit'), 'admin/structure/taxonomy/' . $vocabulary->machine_name . '/edit'));
          break;

        default: //TODO perhaps use this is a test condition for error checking - Undo steps up to this point?
          drupal_set_message(t('Updated vocabulary %name.', array('%name' => $vocabulary->name)));
          watchdog('viu_simple_faq', 'Updated vocabulary %name.', array('%name' => $vocabulary->name), WATCHDOG_NOTICE, l(t('edit'), 'admin/structure/taxonomy/' . $vocabulary->machine_name . '/edit'));
          break;
      }

      //Relate group to vocab
      $og_vocab_relation = array (
        'group_type' => $og_context['group_type'],
        'gid' => $og_context['gid'],
      );
      $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
      $vid = $vocabulary->vid;
      og_vocab_relation_save($vid, $og_vocab_relation['group_type'], $og_vocab_relation['gid']);

      //Simple FAQ content type-specific settings.
      $og_vocab_settings = array(
        'required' => 1,
        'widget_type' => 'options_buttons',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      );

      //Generate OG Vocab Entity
      $field_name = key(og_vocab_get_og_vocab_fields('node', 'viu_simple_faq_question'));
      $og_vocab = og_vocab_create_og_vocab($vid, $og_vocab_relation['group_type'], 'viu_simple_faq_question', $field_name, $og_vocab_settings);

      //Run the og_vocab save method (duplication of default behaviour)
      $og_vocab->save();
    }
  }
}

/**
 * Implements hook_entity_update().
 *
 * For development only, to retrieve Section Default Term properties (for export)
 */
function viu_simple_faq_entity_update($entity, $type) {
  sdpm($entity);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Warn the user to remove content prior to or after section deletion
 * Anything you want to do on section deletion can be added here.
 */
function viu_simple_faq_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
  if (array_key_exists('#node', $form) && 'oa_section' == $form['#node']->type) {
    if ('node:oa_section:simple_faq_section' == $form['#node']->panelizer['page_manager']->name) {
      $form['description']['#markup'] = t('Are you sure you want to do this?  Any remaining FAQ content and categories will be orphaned!');
    }
  }
}

/**
 * Implements hook_exit().
 */
function viu_simple_faq_exit($destination = NULL) {
  sdpm($destination);
}
