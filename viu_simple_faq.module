<?php
/**
 * @file
 * Code for the VIU Simple FAQ feature.
 */

include_once 'viu_simple_faq.features.inc';

define('VIU_SIMPLE_FAQ_SECTION_TERM_UUID', 'b8314cd7-46b2-480f-ac52-ba3f1fa9696e');

/**
 * Implements hook_views_api_alter()
 *
 * Views api is specified by features but we want to add the template directory.
 */
function viu_simple_faq_views_api_alter(&$apis) {
  if (!empty($apis['viu_simple_faq']) && '3.0' == $apis['viu_simple_faq']['api']) {
    $apis['viu_simple_faq']['template path'] = drupal_get_path('module', 'viu_simple_faq') . '/templates/views';
  }
}

/**
 * Implements hook_preprocess_HOOK
 *
 * We want to override the panels_bootstrap_pane hook and inject some HTML (for the fa-icon)
 */
function viu_simple_faq_preprocess_viu_panels_pane(&$vars) {
  //Target the Categories pane:
  if ('FAQ Categories' == $vars['title']) {
    $vars['title'] = '<span aria-hidden="true" class="icon-question"></span>&nbsp;' . $vars['title'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function viu_simple_faq_form_oa_section_node_form_alter(&$form, &$form_state, $form_id) {
  //Find the section type through the term id:
  $tid = $form['#node']->field_oa_section[LANGUAGE_NONE][0]['tid'];
  $term = taxonomy_term_load($tid);
  if ('Frequently Asked Questions' == $term->name && $form['#node_edit_form']) {
    if (NULL == $form['body'][LANGUAGE_NONE][0]['#default_value']) {
      $form['body'][LANGUAGE_NONE][0]['#default_value'] = t('Please feel free to contact us about other specific questions that you might have.');
    }
    if (NULL == $form['body'][LANGUAGE_NONE][0]['#description']) {
      $form['body'][LANGUAGE_NONE][0]['#description'] = t('You should update the section below with a link to your staff directory, contact page or contact form.');
    }
  }
}

/**
 * Implements hook_permission().
 */
function viu_simple_faq_permission() {
  //TODO This also might be exported via features, could be why it's doubled on deploy
  return array(
    'access viu_simple_faq administration' => array(
      'title' => t('Manage Simple FAQ'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Provide administration links on the section page
 *
 */
function viu_simple_faq_menu() {
  $items['node/%node/manage_faq'] = array(
    'title' => t('Manage FAQ Items'),
    'page callback' => '_viu_simple_faq_manage_content',
    'page arguments' => array(1),
    'access callback' => '_viu_simple_faq_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );

  $items['node/%node/faq_categories'] = array(
    'title' => t('Manage FAQ Categories'),
    'page callback' => '_viu_simple_faq_manage_categories',
    'page arguments' => array(1),
    'access callback' => '_viu_simple_faq_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  //Dependent on Page Manager Vocabulary Display Page
  $items['node/%node/faq_categories/%taxonomy_vocabulary/add'] = array (
    'title' => t('Add Category'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_form_term', array(),3),
    'access callback' => '_viu_simple_faq_term_access_callback',
    'access arguments' => array(1, 2),
    'type'=> MENU_LOCAL_ACTION,
    'file path' => 'modules/taxonomy',
    'file' => 'taxonomy.admin.inc',
  );

  //Dependent on content admin view (cloned and featurized as part of Simple FAQ)
  //TODO Double check the above is accurate
  $items['node/%node/content/add'] = array (
    'title' => t('Create FAQ Item'),
    'page callback' => '_viu_simple_faq_faq_add',
    'page arguments' => array(1),
    'access callback' => '_viu_simple_faq_content_access_callback',
    'access arguments' => array(1),
    'type'=> MENU_LOCAL_ACTION,
  );

  //WORKING HERE: Register a hidden menu path for the confirm form
  $items['node/%node/content/term_warn'] = array (
    'title' => t('Create FAQ Item'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('viu_simple_faq_term_warning', 1),
    'access callback' => '_viu_simple_faq_content_access_callback',
    'access arguments' => array(1),
    'type'=> MENU_CALLBACK,
  );

  return $items;
}

function _viu_simple_faq_faq_add ($node) {
  //Section ID is the Node ID
  drupal_goto('/node/add/viu-simple-faq-question', array('query' => array('oa_section_ref' => $node->nid)));
}

/**
 * Implements hook_node_prepare().
 *
 * @todo: attempted to get hook_prepare (rather than hook_node_prepare) working but it would not get called
 */
function viu_simple_faq_node_prepare($node) {
  //WORKING HERE
  $get_array = drupal_get_query_parameters();
  $context = og_context();

  //check node type
  if (  'viu_simple_faq_question' == $node->type
    && !empty($get_array)
    && key_exists('oa_section_ref', $get_array)) {
    $section = node_load($get_array['oa_section_ref']);
    $section_machine_name = $section->nid . "_section_faq";
    $faq_categories = taxonomy_vocabulary_machine_name_load($section_machine_name);
    $terms_array = taxonomy_get_tree($faq_categories->vid);
    $term_count = sizeof($terms_array);
    if(0 >= $term_count) {
      drupal_goto('node/' . $section->nid . '/content/term_warn');
    }
  }
}

/**
 * viu_simple_faq_term_warning form
 *  presents a warning message when user attempts to create a new faq node without creating terms first
 *
 * @todo: deprecated by above
 *
 * @param $form
 * @param $form_state
 * @param $node
 * @return mixed
 */
function viu_simple_faq_term_warning($form, $form_state, $node) {
  //Test condition for empty categories here
  $section_machine_name = $node->nid . "_section_faq";
  $faq_categories = taxonomy_vocabulary_machine_name_load($section_machine_name);
  $terms_array = taxonomy_get_tree($faq_categories->vid);
  $term_count = sizeof($terms_array);
  if (0 >= $term_count) {
    //$node here is specific FAQ section node
    $form['#node'] = $node;
    //Provide entity id in the same for key as in the entity edit form (?)
    $form['nid'] = array('#type' => 'value', '#value' => $node->nid);
    return confirm_form($form,
      t('No FAQ Categories to add item to!'),
      'node/' . $node->nid,
      t('Each question and answer must be associated to a FAQ category'),
      t('Add Category'),
      t('Cancel')
    );
  }
  //Catchall (rather than else)
  //TODO not sure if a hard redirect is the correct way to do this
  drupal_goto('/node/add/viu-simple-faq-question', array('query' => array('oa_section_ref' => $node->nid)));
}

/**
 * viu_simple_faq_term_warning form submit handler
 *
 * @param $form
 * @param $form_state
 */
function viu_simple_faq_term_warning_submit($form, $form_state) {
  $node = $form['#node'];
  $section_machine_name = $node->nid . "_section_faq";
  $faq_categories = taxonomy_vocabulary_machine_name_load($section_machine_name);
  //TODO default action: go to the add categories form (nothing else to do here)
  drupal_goto('node/' . $node->nid . '/faq_categories/' . $faq_categories->vid . '/add');
}

/**
 * Access callback for managing FAQ node and term menu tabs
 *
 * @param $node
 * @return bool
 */
function _viu_simple_faq_access_callback($node) {
  if (   'oa_section' == $node->type
      && property_exists($node, 'field_oa_section')
      && array_key_exists(LANGUAGE_NONE, $node->field_oa_section)
      && array_key_exists('0', $node->field_oa_section[LANGUAGE_NONE])){
    return (   _viu_simple_faq_is_term_faq_section($node->field_oa_section[LANGUAGE_NONE][0]['tid'])
        && user_access('access viu_simple_faq administration'));
  } else return FALSE;
}

/**
 * Access callback for adding category to a FAQ section
 * @return bool
 */
function _viu_simple_faq_term_access_callback($node, $vocabulary) {
  return (user_access('access viu_simple_faq administration') &&
          user_access('administer taxonomy') &&
          _viu_simple_faq_access_callback($node));
}

/**
 * Access callback for adding a FAQ item node
 *
 * @param $node
 * @return bool
 */
function _viu_simple_faq_content_access_callback($node) {
  return (user_access('access viu_simple_faq administration') &&
          user_access('create viu_simple_faq_question content') &&
          _viu_simple_faq_access_callback($node));
}

/**
 * Page routing mechanism for Manage FAQ content menu tab
 *
 * @param $node
 *  The current node object (i.e. section page)
 */
function _viu_simple_faq_manage_content($node) {
  //Load the administrative view for that content
  drupal_goto(url('node/' . $node->nid . '/content'));
}

/**
 * Page routing mechanism for Manage Categories FAQ menu tab
 *
 * @param $node
 *  The current node object (i.e. section page)
 * @param $section
 *  The section machine name
 */
function _viu_simple_faq_manage_categories($node) {
  $vocabulary = taxonomy_vocabulary_machine_name_load($node->nid . "_section_faq");
  //load the admin view for that vocab
  drupal_goto(url('node/' . $node->nid . '/faq_categories/' . $vocabulary->vid));
}

/**
 * Page routing for FAQ Category form
 *
 * @param $form_id
 * @param $vocabulary
 * @return array|mixed
 */
function _viu_simple_faq_get_term_form($form_id, $vocabulary) {
  $form = drupal_get_form($form_id, array(), $vocabulary);
  return $form;
}

/**
 * Implements hook_entity_insert().
 *
 * Programmatically create FAQ Categories Taxonomy Vocabulary
 *
 * NOTE:  If you ever re-use this code, consider parameterizing it into a core helper function
 */
function viu_simple_faq_entity_insert($entity, $type) {
  if ('node' == $type && 'oa_section' == $entity->type) {
    if (_viu_simple_faq_is_term_faq_section($entity->field_oa_section[LANGUAGE_NONE][0]['tid'])) {
      //Gather information we need for the name of the new taxonomy vocabulary:
      if ($og_context = og_context()) {
        $group = node_load($og_context['gid']);
      } else {
        drupal_set_message("No og_context detected for taxonomy creation, please delete this section and try again from within a site or space.", 'error', FALSE);
        watchdog('viu_simple_faq', 'FAQ section - No og_context() detected for FAQ categories vocabulary', array(), WATCHDOG_WARNING);
        return;
      }

      //Arbitrary naming convention for OG Vocabularies within FAQ sections:
      $machine_name = $entity->nid . "_section_faq";

      //Generate new vocabulary
      $vocabulary = (object) array(
        'name' => t($group->title . " " . $entity->title),
        'machine_name' => $machine_name,
        'description' => t('These are the default FAQ Categories for the ' . $group->title . ' section.'),
        'hierarchy' => '0',
        'weight' => 0,
      );

      //TODO error checking here (based on return value, throw a drupal_set_msg or error)
      // Perhaps check the name of the created taxonomy, and then set some flag if it's a non-standard machine name
      switch (taxonomy_vocabulary_save($vocabulary)) {
        case SAVED_NEW:
          drupal_set_message(t('Created new vocabulary %name.', array('%name' => $vocabulary->name)));
          watchdog('viu_simple_faq', 'Created new vocabulary %name.', array('%name' => $vocabulary->name), WATCHDOG_NOTICE, l(t('edit'), 'admin/structure/taxonomy/' . $vocabulary->machine_name . '/edit'));
          break;

        default: //TODO May be entirely superfluous, or use for error case
          drupal_set_message(t('Updated vocabulary %name.', array('%name' => $vocabulary->name)));
          watchdog('viu_simple_faq', 'Updated vocabulary %name.', array('%name' => $vocabulary->name), WATCHDOG_NOTICE, l(t('edit'), 'admin/structure/taxonomy/' . $vocabulary->machine_name . '/edit'));
          break;
      }

      //Relate group to vocab
      $og_vocab_relation = array (
        'group_type' => $og_context['group_type'],
        'gid' => $og_context['gid'],
      );
      $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
      $vid = $vocabulary->vid;
      og_vocab_relation_save($vid, $og_vocab_relation['group_type'], $og_vocab_relation['gid']);

      //Simple FAQ content type-specific settings.
      //TODO: These will need to be adjusted because validation shits the bed when we have multiple categories.
      $og_vocab_settings = array(
        'required' => 0,
        'widget_type' => 'options_buttons',
        //'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'cardinality' => 1,
      );

      //Generate OG Vocab Entity
      $field_name = key(og_vocab_get_og_vocab_fields('node', 'viu_simple_faq_question'));
      $og_vocab = og_vocab_create_og_vocab($vid, $og_vocab_relation['group_type'], 'viu_simple_faq_question', $field_name, $og_vocab_settings);

      //Run the og_vocab save method (duplication of default behaviour)
      $og_vocab->save();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_delete_confirm.
 *
 * Warn the user to remove content prior to or after section deletion
 */
function viu_simple_faq_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
  if (array_key_exists('#node', $form) && 'oa_section' == $form['#node']->type) {
    if (_viu_simple_faq_is_term_faq_section($form['#node']->field_oa_section[LANGUAGE_NONE][0]['tid'])) {
      $form['description']['#markup'] = t('Are you sure you want to do this?  FAQ Categories will be destroyed and any remaining FAQ items will be orphaned!');
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function viu_simple_faq_form_alter(&$form, &$form_state, $form_id) {
  if ('viu_simple_faq_question_node_form' == $form_id ) {
    foreach($form['og_vocabulary'][LANGUAGE_NONE][0] as $key => &$value) {
      if (is_array($value) && array_key_exists('#field_name', $value) && 'og_vocabulary' == $value['#field_name']) {
        //Grab a section number:
        $taxonomy = taxonomy_vocabulary_load($key);
        $section_id = preg_replace("/[^0-9]/", "", $taxonomy->machine_name);

        //TODO make sure to append NOT replace the attributes key (safe)
        $value['#attributes'] = array('data-section' => "$section_id");
      }
    }

    $form['#attached']['js'] = array(
      drupal_get_path('module', 'viu_simple_faq') . 'javascripts/viu_simple_faq.js'
    );

    //Override Cancel Button on forms (@todo this needs to be checked to make sure it's not firing on the wrong forms)
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel/Finish'),
      '#submit' => array('_viu_simple_faq_form_cancel'),
      '#executes_submit_callback' => TRUE,
      '#limit_validation_errors' => array(),
      '#weight' => 10,
    );
  }

  if ( 'taxonomy_form_term' == $form_id
    && (strpos($form['#action'], 'faq_categories') !== FALSE)) {
    $form['actions']['cancel'] = array(
      '#type' => 'button',
      '#attributes' => array(
        'class' => array('btn-primary'),
      ),
      '#value' => t('Cancel/Finish'),
      '#submit' => array('_viu_simple_faq_form_cancel'),
      '#executes_submit_callback' => TRUE,
      '#limit_validation_errors' => array(),
      '#weight' => 10,
    );
  }
}

/**
 * Custom cancel callback function for all content management forms
 */
function _viu_simple_faq_form_cancel(&$form, &$form_state) {
  if (array_key_exists('#node', $form) && 'viu_simple_faq_question' == $form['#node']->type) {
    drupal_goto('/node/' . $form['oa_section_ref'][LANGUAGE_NONE]['#value'] . '/content');
  } else {
    //Following line works on Taxonomy form cancel button only:
    drupal_goto(strstr($form['#action'], '/add', TRUE));
  }
}

/**
 * Implements hook_entity_delete().
 *
 * We are going to delete the OG Vocabulary at this point
 */
function viu_simple_faq_entity_delete($entity, $type) {
  //Determine if we are deleting a FAQ Section:
  if ('node' == $type && 'oa_section' == $entity->type) {
    if (_viu_simple_faq_is_term_faq_section($entity->field_oa_section[LANGUAGE_NONE][0]['tid'])) {
      $machine_name = $entity->nid . "_section_faq";
      $taxonomy = taxonomy_vocabulary_machine_name_load($machine_name);
      taxonomy_vocabulary_delete($taxonomy->vid);
    }
  }
}

/**
 * Helper function to determine if a term is a faq section
 *
 * Takes a term id and then checks it's UUID to see if it belongs
 *  to the "faq section" term in the "section types" vocabulary
 *
 * @param $tid
 * @return bool
 */
function _viu_simple_faq_is_term_faq_section ($tid) {
  $term = taxonomy_term_load($tid);
  return (   property_exists($term, 'uuid')
          && VIU_SIMPLE_FAQ_SECTION_TERM_UUID == $term->uuid);
}
